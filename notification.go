package main

import (
	"context"
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

func GetAllUserId(collection *mongo.Collection, fieldName string) []interface{} {
	ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
	allUserId, err := collection.Distinct(ctx, fieldName, bson.D{})
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(allUserId...)
	return allUserId
}

// –í—ã–∑–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
func CallAtTime(hour, min, sec int, bot *tgbotapi.BotAPI, chatId int64, f func(bot *tgbotapi.BotAPI, chatId int64)) error {
	//–ü–û–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –ú–æ—Å–∫–≤–∞
	msk, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		return err
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
	now := time.Now().Local()
	t := now.In(msk)
	firstCallTime := time.Date(
		now.Year(), now.Month(), now.Day(), hour, min, sec, 0, msk)
	if firstCallTime.Before(now) {
		// –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—Ä–µ–º—è —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ, –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Å—É—Ç–∫–∏.
		firstCallTime = firstCallTime.Add(time.Hour * 24)
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–æ –∑–∞–ø—É—Å–∫–∞.
	duration := firstCallTime.Sub(time.Now().Local())

	fmt.Printf("–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: %v\n–í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ –ú–°–ö: %v\n–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v\n –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–°–ö: %v\n", now, firstCallTime, duration, t)

	//–ì–æ—Ä—É—Ç–∏–Ω–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
	go func() {
		time.Sleep(duration)
		for {
			f(bot, chatId)
			// –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏.
			time.Sleep(time.Hour * 24)
		}
	}()

	return nil
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
func Notification(bot *tgbotapi.BotAPI, chatId int64) {
	msg := "<i><b>üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b></i>\n–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ª–∞ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–µ, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥ —Ä—É–∫–æ–π!"
	msgParse := tgbotapi.NewMessage(chatId, msg)
	msgParse.ParseMode = tgbotapi.ModeHTML
	bot.Send(msgParse)
	fmt.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: %v\n", time.Now())
}

//–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
func SendNotification(allUserId []interface{}, bot *tgbotapi.BotAPI) {
	for _, id := range allUserId {
		chatId := int64(id.(int32))
		err := CallAtTime(0, 0, 0, bot, chatId, Notification) //—Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–∏–Ω–∏—è –ø–æ Chat.ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		if err != nil {
			fmt.Printf("error: %v\n", err)
		}
	}
}

func SendUpdateNotification(allUserId []interface{}, bot *tgbotapi.BotAPI) {
	for _, id := range allUserId {
		chatId := int64(id.(int32))
		msg := "<b>üÜï–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ @mtdlBot ‚Ññ1:</b>\n1. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–µ–ª–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /add, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –¥–µ–ª–æ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –±–æ—Ç—É.\n2. –ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /start, –±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n3. –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞.\n4. –î–æ–±–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.\n5. –î–æ–±–∞–≤–ª–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–µ–ª, –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ 00:00 –ø–æ –ú–°–ö.\n\n‚öúÔ∏è<b>–ê–Ω–æ–Ω—Å –ø–ª–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:</b>\n- –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ–ª;\n- –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ª (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ –∏ —Ç.–ø.);\n- —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ª–∞."
		msgParse := tgbotapi.NewMessage(chatId, msg)
		msgParse.ParseMode = tgbotapi.ModeHTML
		bot.Send(msgParse)
	}
}
