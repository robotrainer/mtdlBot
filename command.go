package main

import (
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type todo struct {
	title     string
	completed bool
}

type todos map[int]todo

var db = map[int]todos{}

func AddTodo(data map[int]todos, userId int, update tgbotapi.Update) {
	if _, ok := data[userId]; !ok {
		data[userId] = make(todos)
	}
	messageId := len(data[userId]) + 1
	newMessage := strings.Replace(update.Message.Text, "add ", "", 1)
	data[userId][messageId] = todo{newMessage, false}
}

func RemoveTodo(data map[int]todos, userId int, command string, bot *tgbotapi.BotAPI, update tgbotapi.Update) string {
	msg := ""
	id, err := strconv.Atoi(command)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, err.Error()))
	}
	if id <= len(data[userId]) && id > 0 {
		// –≤–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ–ø–æ–ª–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
		for _id, _ := range data[userId] {
			if _id > id {
				data[userId][id] = data[userId][_id]
				id = _id
			}
		}
		delete(data[userId], id)
		msg = fmt.Sprintf("–î–µ–ª–æ %v —É–¥–∞–ª–µ–Ω–æ.", command)
	} else {
		msg = "–¢–∞–∫–æ–µ –¥–µ–ª–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
	}
	return msg
}

func ToggleTodo(data map[int]todos, userId int, command string, bot *tgbotapi.BotAPI, update tgbotapi.Update) string {
	// –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–∫–æ–≥–æ –¥–µ–ª–∞
	id, err := strconv.Atoi(command)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, err.Error()))
	}
	for _id, message := range data[userId] {
		if _id == id {
			message.completed = !message.completed
			data[userId][_id] = message
		}
	}
	msg := fmt.Sprintf("–°—Ç–∞—Ç—É—Å –¥–µ–ª–∞ %v –∏–∑–º–µ–Ω—ë–Ω.", id)
	return msg
}

func CleanTodoList(data map[int]todos, userId int) {
	//—Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª
	data[0] = make(todos)
	// –≤–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
	i := 1
	for _id, message := range data[userId] {
		if !message.completed {
			data[0][i] = data[userId][_id]
			i++
		}
	}
	data[userId] = make(todos)
	data[userId] = data[0]
	delete(data, 0)
}

func AllTodoList(data map[int]todos, userId int) string {
	//–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–µ–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–∫–∞ –¥–µ–ª–∞
	msg := ""
	for i := 1; i <= len(db[userId]); i++ {
		emoji := "üî¥"
		if db[userId][i].completed {
			emoji = "üü¢"
		}
		msg += fmt.Sprintf("%s %v. %s\n", emoji, i, db[userId][i].title)
	}
	return msg
}
