package main

import (
	"context"
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type Categorys struct {
	Userid   int
	Category string
}

var keyCategory = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		// tgbotapi.NewKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
		tgbotapi.NewKeyboardButton("1"),
		tgbotapi.NewKeyboardButton("2"),
		tgbotapi.NewKeyboardButton("3"),
		tgbotapi.NewKeyboardButton("4"),
		tgbotapi.NewKeyboardButton("5"),
		tgbotapi.NewKeyboardButton("6"),
		tgbotapi.NewKeyboardButton("7"),
		tgbotapi.NewKeyboardButton("8"),
		tgbotapi.NewKeyboardButton("9"),
	),
	tgbotapi.NewKeyboardButtonRow(
		// tgbotapi.NewKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
		tgbotapi.NewKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
		tgbotapi.NewKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
	),
)

var keboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–í—Å–µ –¥–µ–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
		tgbotapi.NewKeyboardButton("–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫"),
		tgbotapi.NewKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ"),
		tgbotapi.NewKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"),
	),
)

func main() {

	client, collectionTodos, colCategory := InitMongo()
	ctx, _ := context.WithTimeout(context.Background(), 10*time.Second)
	defer client.Disconnect(ctx)

	bot, updates := InitBot()

	allUserId := GetAllUserId(collectionTodos, "userid") //–ü–æ–ª—É—á–∏—Ç—å userid –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –¥–µ–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

	//–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.
	//–ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ—á–∫—É –ù–ò–ñ–ï.
	SendUpdateNotification(allUserId, bot)

	//–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–±–ª–µ–Ω–∏–π.
	// SendNotification(allUserId, bot)

	flag := ""
	nameCategory := "–†–∞–∑–Ω–æ–µ"

	for update := range updates {
		if update.Message == nil {
			continue
		}

		//–ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞
		now := FormatTime(update.Message.Time())
		userId := update.Message.From.ID
		getMessage := update.Message.Text
		msg := ""

		switch getMessage {
		case "/start":
			msg = fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é —Ç–µ–±—è, <b><i>%s</i>! üÜï–†–µ–ª–∏–∑ –≤–µ—Ä—Å–∏–∏ @mtdlBot 2.0:</b>\n- –∏–∑–º–µ–Ω—ë–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n- –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ–ª\n- –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ª–∞\n- –¥–æ–±–∞–≤–ª–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏–π –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ª–∞.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –¥–µ–ª–æ–º. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è \"–†–∞–∑–Ω–æ–µ\". –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤—Å–µ –¥–µ–ª–∞ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ–Ω–∞ —Å—Ä–∞–∑—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏ –Ω–æ–≤—ã–µ –¥–µ–ª–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –Ω–µ—ë. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤—Å–µ –¥–µ–ª–∞ –≤ –Ω–µ–π –±—É–¥—É—Ç —Ç–∞–∫ –∂–µ —É–¥–∞–ª–µ–Ω—ã.", update.Message.From.FirstName)
			update := bson.M{"$set": bson.M{"category": "–†–∞–∑–Ω–æ–µ"}}
			ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
			_, err := colCategory.UpdateOne(ctx, Categorys{userId, "–†–∞–∑–Ω–æ–µ"}, update, options.Update().SetUpsert(true))
			// _, err := colCategory.InsertOne(ctx, Categorys{userId, "–†–∞–∑–Ω–æ–µ"})
			if err != nil {
				log.Fatal(err)
			}
		case "help":
			msg = "–¢—É—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Å–ø—Ä–∞–≤–∫–∞."
		case "settings":
			msg = "–¢—É—Ç –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞. –°–µ–π—á–∞—Å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
		case "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ":
			msg = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —É–¥–∞–ª—è–µ–º–æ–≥–æ –¥–µ–ª–∞."
			flag = getMessage
		case "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
			msg = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞."
			flag = getMessage
		case "–£–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
			msg = CleanTodoList(collectionTodos, userId)
			msg += PrintTodoList(AllTodoList(collectionTodos, userId, nameCategory), now)
		case "–í—Å–µ –¥–µ–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
			msg = PrintTodoList(AllTodoList(collectionTodos, userId, nameCategory), now)
		case "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫":
			msg = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –∏ –¥–∞—Ç—É.\n–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: <–Ω–æ–º–µ—Ä –¥–µ–ª–∞>. <—á–∏—Å–ª–æ> <–º–µ—Å—è—Ü –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏> <–≥–æ–¥> <—á—á>:<–º–º>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <b>3. 12 Dec 2021 17:35</b>" //—Å–¥–µ–ª–∞—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∏?
			flag = getMessage
		case "–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
			Msg := "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë –Ω–æ–º–µ—Ä.\n"
			Msg += PrintCategory(GetAllUserCategory(colCategory, userId))
			m := tgbotapi.NewMessage(update.Message.Chat.ID, Msg)
			m.ParseMode = tgbotapi.ModeHTML
			m.ReplyMarkup = keyCategory
			bot.Send(m)
			flag = getMessage
		case "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
			msg = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
			flag = getMessage
		case "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
			msg = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
			flag = getMessage
		default:
			if flag == "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ" {
				msg = RemoveTodo(collectionTodos, userId, update.Message.Text, nameCategory)
				msg += PrintTodoList(AllTodoList(collectionTodos, userId, nameCategory), now)
			} else if flag == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å" {
				msg = ToggleTodo(collectionTodos, userId, update.Message.Text, nameCategory)
				msg += PrintTodoList(AllTodoList(collectionTodos, userId, nameCategory), now)
			} else if flag == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫" {
				msg = Deadline(collectionTodos, userId, update.Message.Text, nameCategory)
				msg += PrintTodoList(AllTodoList(collectionTodos, userId, nameCategory), now)
			} else if flag == "–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" {
				indexCategory := update.Message.Text
				result, i := ValidityOfIndex(colCategory, userId, indexCategory)
				if result {
					category := GetAllUserCategory(colCategory, userId)
					nameCategory = category[i-1].Category
					msg = fmt.Sprintf("–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è <b>%s</b>\n", nameCategory)
					msg += PrintTodoList(AllTodoList(collectionTodos, userId, nameCategory), now)
				} else {
					msg = "<i>‚ùó–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n</i>"
				}
			} else if flag == "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" {
				category := update.Message.Text
				if category != "–†–∞–∑–Ω–æ–µ" && category != "—Ä–∞–∑–Ω–æ–µ" {
					ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)
					_, err := colCategory.InsertOne(ctx, Categorys{userId, category})
					if err != nil {
						log.Fatal(err)
					}
					msg = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞."
				} else {
					msg = "<i>‚ùó–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</i>"
				}
			} else if flag == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" {
				indexCategory := update.Message.Text
				msg = RemoveCategory(colCategory, collectionTodos, userId, indexCategory)
				nameCategory = "–†–∞–∑–Ω–æ–µ"
			} else { //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–µ–ª–∞
				msg = AddTodo(collectionTodos, userId, update.Message.Text, nameCategory, update.Message.Time()) //–¥–æ–±–∞–≤–ª—è—Ç—å –¥–µ–ª–∞ –æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
				msg += PrintTodoList(AllTodoList(collectionTodos, userId, nameCategory), now)
			}
			flag = ""
		}

		msgParse := tgbotapi.NewMessage(update.Message.Chat.ID, msg)
		msgParse.ParseMode = tgbotapi.ModeHTML
		if flag == "" {
			msgParse.ReplyMarkup = keboard
		} else {
			msgParse.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		}
		bot.Send(msgParse)
	}
}
